<solution 34.문자열 내림차순으로 정렬하기>
다른 분 코드 정답 1)
- return Stream.of(s.split("")).sorted(Comparator.reverseOrder()).collect(Collectors.joining()); *s=String s
다른 분 코드 정답 2)
- return new StringBuilder(new String(a)).reverse().toString();  *a=char 배열이름

<solution 35.부족한 금액 계산하기>
다른 분 코드 정답 1)
- return Math.max(price * (count * (count + 1) / 2) - money, 0);
다른 분 코드 정답 2)
-  answer = (long)price*count*(count+1)/2 - money;
     return answer<=0?0:answer;

<solution 36.문자열 다루기 기본>
다른 분 코드 정답 1)
-  if (s.length() == 4 || s.length() == 6) return s.matches("(^[0-9]*$)");
         return false;
다른 분 코드 정답 2)
-    if(s.length() == 4 || s.length() == 6){
            try{
                int x = Integer.parseInt(s);
                return true;
            } catch(NumberFormatException e){
                return false;
            }
        }
        else return false;
    }

<solution 37.행렬의 덧셈>
다른 분 코드 정답 1)
-  int[][] answer = {};
          answer = arr1;
          for(int i=0; i<arr1.length; i++){
              for(int j=0; j<arr1[0].length; j++){
                  answer[i][j] += arr2[i][j];
              }
          }

<solution 38.직사각형 별찍기>
다른 분 코드 정답 1)
     StringBuilder sb = new StringBuilder();
     IntStream.range(0, a).forEach(s -> sb.append("*"));
     IntStream.range(0, b).forEach(s -> System.out.println(sb.toString()));

<solution 39. 최대공약수와 최소공배수>
int[] answer =new int[2];
answer[0]= gcd(a,b);
answer[1]=(a*b)/answer[0];
...
public static int gcd(int p, int q){
if(q==0)
  reutrn p;
return gcd(q, p%q);
}


<solution 40.3진법 뒤집기>
다른 분 코드 정답 1)
       String a = "";
        while(n > 0){
            a = (n % 3) + a;
            n /= 3;
        }
        a = new StringBuilder(a).reverse().toString();
        return Integer.parseInt(a,3);

<solution 41.이상한 문자 만들기>
다른 분 코드 정답 1)
     String answer = "";
        int cnt = 0;
        String[] array = s.split("");

        for(String ss : array) {
            cnt = ss.contains(" ") ? 0 : cnt + 1;
            answer += cnt%2 == 0 ? ss.toLowerCase() : ss.toUpperCase();
        }
      return answer;

<solution 43.크기가 작은 부분 문자열>
다른 분 코드 정답 1)

import java.util.stream.LongStream;

class Solution {
    public int solution(String t, String p){
       int answer= 0;
       long ip= Long.parseLong(p);

       for(int i=0;i<=t.length()-p.length();i++){
          if(Long.parseLong(t.substring(i,i+p.length()))<=ip){
            answer++;
          }
       }
       return answer;
    }
    }

다른 분 코드 정답2)
import java.util.stream.LongStream;

class Solution{
   public int solution(String t, String p){
      long targetNumber= Long.parseLong(p);
      int targetNumberLength= p.length();

      return (int ) LongStream.range(0L, t.length()- targetNumberLength + 1L)
         .mapToObj(i->t.substring((int)i, (int) i+ targetNumberLength)
         .mapToLong(Long::parseLong)
         .filter(number->number<=targetNumber)
         .count();
   }
}

<solution44.최소직사각형>
다른 분 코드1)
  class Solution{
    public int solution(int[][] sizes){
       int length, height=0;

        for(int[] card: sizes){
          length= Math.max(length, Math.max(card[0], card[1]));
          height= Math.max(height, Math.min(card[0], card[1]));
          }
          int answer=length*height;
          return answer;
    }
  }

  <solution48>
  다른 분 코드1)
    public int[] solution(int[] array, int[][] commands) {
          int[] answer = new int[commands.length];

          for(int i=0; i<commands.length; i++){
              int[] temp = Arrays.copyOfRange(array, commands[i][0]-1, commands[i][1]);
              Arrays.sort(temp);
              answer[i] = temp[commands[i][2]-1];
          }

          return answer;
      }

 <solution51>
 다른 분 코드1)
  public String solution(int[] food) {
         String answer = "0";

         for (int i = food.length - 1; i > 0; i--) {
             for (int j = 0; j < food[i] / 2; j++) {
                 answer = i + answer + i;
             }
         }
         return answer;
     }


 <solution53>
 다른 분 코드1)
  public int[] solution(int k, int[] score){
     int[] answer= new int[score.length];

     PriorityQueue<Integer> priorityQueue = new PriorityQueue<>();

     int temp=0;

     for(int i=0; i<score.length;i++){
       priority.add(score[i]);
       if(priorityQueue.size()>k){
         priorityQueue.poll();
       }
       answer[i] = priorityQueue.peek();
     }
     return answer;
  }

